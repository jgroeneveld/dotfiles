set nocompatible                  " Must come first because it changes other options.
source ~/.vim/bundle.vim

" ======================= training mode
" noremap   <Up>     <NOP>
" noremap   <Down>   <NOP>
" noremap   <Left>   <NOP>
" noremap   <Right>  <NOP>
" ======================

let mapleader = ","

syntax enable
syntax sync minlines=256          " maybe more speed?

filetype plugin indent on         " Turn on file type detection.
set synmaxcol=200                 " disable highlighting long lines

set showmode                      " Display the mode you're in.

set whichwrap+=<,>,h,l,[,]        " Automatically move to next line at EOL

set mouse=a                       " Enable the mouse

set hidden                        " Handle multiple buffers better.

set lazyredraw                    " Dont update the display while executing macros

set wildmode=list:longest,full    " Complete files like a shell.

set number                        " Show line numbers.

set hlsearch                      " Highlight matches.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital
set gdefault                      " Set global as default for substitute

set nowrap                          " Turn off line wrapping.
set linebreak

set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set backupdir^=~/.vim/_backup//   " where to put backup files.
set directory^=~/.vim/_temp//     " where to put swap files
set updatecount=0                 " disable swap files

set tabstop=2                     " Global tab width.
set shiftwidth=2                  " And again, related.
set expandtab                     " Use spaces instead of tabs

set splitright                    " More natural splitting
set splitbelow

set cursorline


" Useful status information at bottom of screen
set statusline=%<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

set relativenumber

set list
set listchars=tab:▸\ ,trail:.,extends:❯,precedes:❮

set t_Co=256
if has("gui_running")
  set background=light
  "colors solarized
  colors pastie_jaap
  "highlight CursorLineNr guifg=#ffff00 guibg=#666666
  "colors lucius
  "LuciusDark
  "let g:airline_theme='wombat'
  let g:airline_theme='sol'
else
  colors lucius
  LuciusDark
  let g:airline_theme='wombat'
endif

" CtrlP settings
let g:ctrlp_max_files=10000
let g:ctrlp_max_depth=40
let g:ctrlp_match_func = {'match': 'matcher#cmatch' }
let g:ctrlp_extensions = ['funky']

" Airline settings
let g:airline_symbols = {}
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'
let g:airline_powerline_fonts = 1

" ==================== Wild settings ====================
" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

set wildignore+=*.so,*.pdf,*.png,*.jpg,*.gif,*.swf
set wildignore+=*/tmp/*
set wildignore+=*/log/*
set wildignore+=*/vendor/*
set wildignore+=*/spec/cassettes/*
set wildignore+=*/public/assets/*
set wildignore+=*/public/uploads/*

" for phraseapp in specific
set wildignore+=/Users/dynport/projects/dynport/phrase/solr/*
set wildignore+=*/.rsync_cache/*

" use the_silver_searcher
let g:ackprg = 'ag --nogroup --nocolor --column'

" disabling auto insert of linebreaks when entering text
" http://vim.wikia.com/wiki/Word_wrap_without_line_breaks
set textwidth=0 wrapmargin=0



" ==================== Commands ====================
command! OpenFolder silent !open %:p:h
command! OpenInChrome silent !open % -a "Google Chrome"

function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
command! RenameFile call RenameFile()

function! PromoteToLet()
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
endfunction
command! PromoteToLet :call PromoteToLet()

" ==================== Mappings ====================
" make zm center horizontal
:nnoremap zm zszH

" delete buffer without closing window
command! BD :bp\|bd #
nmap <silent> <leader>d :BD<CR>

" use <c-c> where possible
imap <c-c> <esc>
let g:multi_cursor_quit_key='<c-c>'

" quickly switch to alternate file (last buffer)
nnoremap <leader><leader> <c-^>

" expand directory of current active file
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" easier window traversal
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" use Very Nomagic Search Patterns by default
nnoremap / /\V
vnoremap / /\V
nnoremap ? ?\V
vnoremap ? ?\V

nmap <LEFT> <C-w>h
nmap <DOWN> <C-w>j
nmap <UP> <C-w>k
nmap <RIGHT> <C-w>l

" faster movin
nnoremap ∆ 4j
nnoremap ˚ 4k

" adding lines above / below cursor without moving (stolen from unimpaired)
function! s:BlankUp(count) abort
  put!=repeat(nr2char(10), a:count)
  ']+1
  silent! call repeat#set("\<Plug>myBlankUp", a:count)
endfunction

function! s:BlankDown(count) abort
  put =repeat(nr2char(10), a:count)
  ']-1
  silent! call repeat#set("\<Plug>myBlankDown", a:count)
endfunction

nnoremap <silent> <Plug>myBlankUp    :<C-U>call <SID>BlankUp(v:count1)<CR>
nnoremap <silent> <Plug>myBlankDown  :<C-U>call <SID>BlankDown(v:count1)<CR>

nmap <Space>k <Plug>myBlankUp
nmap <Space>j <Plug>myBlankDown

nmap <silent> [t :tabp<cr>
nmap <silent> ]t :tabn<cr>

nmap <silent> [b :BufSurfBack<cr>
nmap <silent> ]b :BufSurfForward<cr>

" Remap redo
nmap U <C-R>

" Make Y consistent with D,C etc
nnoremap Y y$

" remap # to * for use with SearchHighlighting script
nmap # *
vmap # *

" ------ thoughtbot/vim-rspec ------ {{{
  " copy the config over and change the command to use bundler 
  let g:rspec_runner = "os_x_terminal"
  let s:cmd = "be rspec {spec}"

  if has("gui_running") && has("gui_macvim")
    let g:rspec_command = "silent !~/.vim/bundle/vim-rspec/bin/" . g:rspec_runner . " '" . s:cmd . "'"
  else
    let g:rspec_command = "!clear && echo " . s:cmd . " && " . s:cmd
  endif

  map <Leader>r :call RunCurrentSpecFile()<CR>
  map <Leader>s :call RunNearestSpec()<CR>
  map <Leader>l :call RunLastSpec()<CR>
  map <Leader>a :call RunAllSpecs()<CR>
" }}}

" ------ xolox/vim-session ------ {{{
  let g:session_autosave = 'no'
  let g:session_autoload = 'no'
" }}}

" Gundo
nnoremap <F5> :GundoToggle<CR>

" Splitjoin
nmap <Space>ss :SplitjoinSplit<CR>
nmap <Space>sj :SplitjoinJoin<CR>

" NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>
" dont replace netrw, ignore open nerdtree when closing vim
let NERDTreeHijackNetrw = 0
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

nnoremap <C-DOWN> :cn<CR>zt
nnoremap <C-UP> :cp<CR>zt


" ==================== Git commit ====================
" activates spelling correction and enters insert
" mode when commiting
if has('autocmd')
  if has('spell')
    au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
  endif
  au BufNewFile,BufRead COMMIT_EDITMSG call feedkeys('ggA', 't')
endif

" ==================== Remove trailing whitespaces on save ====================
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
command! KillWhitespace call <SID>StripTrailingWhitespaces()

autocmd FileType c,cpp,java,php,ruby,python,markdown autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" ==================== save file and create dirs if missing ====================
function! WriteCreatingDirs()
    execute ':silent !mkdir -p %:h'
    write
endfunction
command! W call WriteCreatingDirs()

" =================== neocompl ===================
" let g:acp_enableAtStartup = 0
" let g:neocomplete#enable_at_startup = 1
" " let g:neocomplete#enable_cursor_hold_i = 1
" let g:neocomplete#disable_auto_complete = 1

" if !exists('g:neocomplete#sources')
"   let g:neocomplete#sources = {}
" endif
" let g:neocomplete#sources._ = ['buffer', 'file', 'ultisnips', 'tag']

" inoremap <C-Space> <C-x><C-u>

" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags


" ==================== YouCompleteMe ====================
let g:ycm_auto_trigger = 1
let g:ycm_collect_identifiers_from_tags_files = 0
let g:ycm_min_num_of_chars_for_completion = 3
let g:ycm_min_num_identifier_candidate_chars = 4

" ycm should not use tab key http://www.alexeyshmalko.com/2014/youcompleteme-ultimate-autocomplete-plugin-for-vim/
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'qf' : 1,
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'unite' : 1,
      \ 'text' : 1,
      \ 'vimwiki' : 1,
      \ 'pandoc' : 1,
      \ 'infolog' : 1,
      \ 'mail' : 1,
      \ 'yaml': 1,
      \ 'xml': 1
      \}

" =================== Make AutoComplete Popups work with UltiSnips ===============
" http://stackoverflow.com/questions/14896327/ultisnips-and-youcompleteme
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"
"
" let g:UltiSnipsExpandTrigger="<c-j>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsListSnippets="<c-e>"

" ==================== Remember last location ====================
" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g`\"" | endif


" ==================== Go ====================
" godef
let g:godef_same_file_in_same_window=1
let g:godef_split=0 " 0 = reuse window, 1 = split, 2 = tab
let g:gofmt_command="goimports"
au Filetype go :nnoremap <buffer> <Leader>gi :Import 
au Filetype go :nnoremap <buffer> <Leader>gf :Fmt<cr>:update<cr>


" ==================== Filetypes ====================
" In Makefiles, use real tabs, not tabs expanded to spaces
au FileType make setlocal noexpandtab

" go go
au FileType go setlocal noexpandtab nolist



" Make sure all markdown files have the correct filetype set and setup wrapping
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown
au FileType markdown setlocal showbreak=\ \  wrap nolist noexpandtab

" options for text
au FileType text setlocal wrap nolist 

" for rcmdnk/vim-mardown or plasticboy/vim-markdown
let g:vim_markdown_initial_foldlevel=3

" make Python follow PEP8 for whitespace ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python setlocal softtabstop=4 tabstop=4 shiftwidth=4

" read folder based vimrc files
if filereadable(".vimrc.local")
  so .vimrc.local
endif

autocmd FileType java setlocal tabstop=4 shiftwidth=4 noexpandtab nolist


" setup Unite
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column -S'
  let g:unite_source_grep_recursive_opt = ''
endif

autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings() "{{{
  " Overwrite settings.
  nmap <buffer> <ESC> <Plug>(unite_exit)
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  imap <silent><buffer><expr> <C-s> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
endfunction "}}}


call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
let g:unite_force_overwrite_statusline = 0
let g:unite_source_rec_max_cache_files=5000
let g:unite_prompt='» '
" let g:unite_split_rule = 'botright'


" setup ignore patterns
call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.git/',
      \ 'tmp/',
      \ 'log/',
      \ ], '\|'))
call unite#custom#source('file_rec/async','sorters','sorter_rank')
call unite#custom#source('line,outline','matchers','matcher_fuzzy')

map <space> [unite]
nnoremap [unite] <nop>

nnoremap [unite]p :Unite -auto-resize -buffer-name=files -start-insert file_rec/async:!<cr>
nnoremap [unite]t :Unite -auto-resize -buffer-name=files -start-insert file<cr>
nnoremap [unite]l :Unite -auto-resize -buffer-name=lines -start-insert line<cr>
nnoremap [unite]f :Unite -no-quit -buffer-name=search grep:.<cr>
nnoremap [unite]o :Unite -auto-resize -buffer-name=outline outline<cr>
nnoremap [unite]m :Unite -auto-resize -buffer-name=recent file_mru<cr>
nnoremap [unite]b :Unite -auto-resize -buffer-name=buffer buffer<cr>
nnoremap [unite]u :UniteResume<cr>

